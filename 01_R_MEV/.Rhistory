dfRegression$flashbots_Flag <- as.factor(dfRegression$flashbots_Flag)
dfRegression$Month <- as.factor(dfRegression$Month)
dfRegression$WeekNumber <- as.factor(dfRegression$WeekNumber)
dfRegression$Weekyday <- as.factor(dfRegression$Weekyday)
dfRegression$Hour <- as.factor(dfRegression$Hour)
dfRegressionSmall$flashbots_Flag <- as.factor(dfRegressionSmall$flashbots_Flag)
dfRegressionSmall$Month <- as.factor(dfRegressionSmall$Month)
dfRegressionSmall$WeekNumber <- as.factor(dfRegressionSmall$WeekNumber)
dfRegressionSmall$Weekyday <- as.factor(dfRegressionSmall$Weekyday)
dfRegressionSmall$Hour <- as.factor(dfRegressionSmall$Hour)
# avg_gas: Base model without Ar term
LM00_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour  # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# median_gas: Base model without Ar term
LM00_gasPriceMedian <- median_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour  # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# threshold_gas: Base model without Ar term
LM00_gasPriceThreshold <- threshold_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour  # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# avg_gas: Base model with reduced controls(no WeekNumber or Month) and AR-term
LM01_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + lag(avg_gas,1) # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# median_gas Base model
LM01_gasPriceMedian <- median_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + lag(avg_gas,1) # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# threshold_gas_Base model with reduced controls(no WeekNumber or Month) and AR-term
LM01_gasPriceThreshold <- threshold_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + lag(avg_gas,1) # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# Base model with quadratic terms for selected variables (based on visual plots)
LM02_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + avg_gas_lag1 + I(avg_gas_lag1^2) + I(attacks_GasFee_Gwei^2) +I(AttackCount^2) +I(price_USD_delta^2)
# + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# Base model without AR term
LM03_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty + price_USD_delta + transaction_count_block + Weekyday + Hour
# ADL model from base model for dynlm
# needs to be time series elemnt to work! Checked with lm() to get same result
ADL01_gasPriceAvg <- ts(avg_gas) ~ ts(attacks_GasFee_Gwei) + ts(attacks_GasFee_Gwei) + ts(attacks_GasUsed) + ts(AttackCount) + ts(flashbots_Flag) + ts(difficulty) + ts(price_USD_delta) + ts(transaction_count_block) + ts(Weekyday) + ts(Hour) + L(ts(avg_gas),1)
# Main regressions
RS_LM01_gasPriceAvg <- lm(LM01_gasPriceAvg , data = dfRegression)
RS_LM01_gasPriceMedian <- lm(LM01_gasPriceMedian , data = dfRegression)
RS_LM01_gasPriceThreshold <- lm(LM01_gasPriceThreshold , data = dfRegression)
# Without AR term
RS_LM00_gasPriceAvg <- lm(LM00_gasPriceAvg , data = dfRegression)
RS_LM00_gasPriceMedian <- lm(LM00_gasPriceMedian , data = dfRegression)
RS_LM00_gasPriceThreshold <- lm(LM00_gasPriceThreshold , data = dfRegression)
?stargazer
stargazer(RS_LM00_gasPriceAvg, RS_LM01_gasPriceAvg,
RS_LM00_gasPriceMedian ,RS_LM01_gasPriceMedian,
RS_LM00_gasPriceThreshold, RS_LM01_gasPriceThreshold, type = , column.sep.width = "1pt") #, se = list(SE_NW_LM01_White)
stargazer(RS_LM00_gasPriceAvg, RS_LM01_gasPriceAvg,
RS_LM00_gasPriceMedian ,RS_LM01_gasPriceMedian,
RS_LM00_gasPriceThreshold, RS_LM01_gasPriceThreshold, type = , column.sep.width = "1pt", column.labels = c("No AR", "Incl. AR","No AR", "Incl. AR","No AR", "Incl. AR")) #, se = list(SE_NW_LM01_White)
library(ggplot2)
library("dplyr")
library(stargazer)
library(tidyr)
library("readxl")
library("arrow")
library("tseries")
library(scales)
library(reshape)
library(ggbreak)
library(forcats)
library(corrplot)
library(car)
library("nlme")
library("unix")
library("dynlm")
library("sandwich")
library(lmtest)
library(MASS)
library(GGally)
library(xtable)
#rlimit_all() # reading memory limits
#rlimit_as(1e12)  #increases to ~12GB
dir <- "/Users/marcvendramet/Documents/GitHub/MV_MEV-thesis/01_R_MEV"
dirplots <- "/Users/marcvendramet/Desktop/HSG/Master/MA/99_Overleaf/02_Plots"
dirInput <- "/Volumes/Extreme SSD"
setwd(dir)
dfRegression <- read.csv("/Volumes/Extreme SSD/97_FinalSet/MEV_Regression_v1.csv")
dfRegression$flashbots_Flag <- as.factor(dfRegression$flashbots_Flag)
dfRegression$Month <- as.factor(dfRegression$Month)
dfRegression$WeekNumber <- as.factor(dfRegression$WeekNumber)
dfRegression$Weekyday <- as.factor(dfRegression$Weekyday)
dfRegression$Hour <- as.factor(dfRegression$Hour)
# avg_gas: Base model without Ar term
LM00_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour  # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# median_gas: Base model without Ar term
LM00_gasPriceMedian <- median_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour  # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# threshold_gas: Base model without Ar term
LM00_gasPriceThreshold <- threshold_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour  # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# avg_gas: Base model with reduced controls(no WeekNumber or Month) and AR-term
LM01_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + lag(avg_gas,1) # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# median_gas Base model
LM01_gasPriceMedian <- median_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + lag(median_gas,1) # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# threshold_gas_Base model with reduced controls(no WeekNumber or Month) and AR-term
LM01_gasPriceThreshold <- threshold_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + lag(threshold_gas,1) # + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
######################
# Base model with quadratic terms for selected variables (based on visual plots)
LM02_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty_log + price_USD_delta + transaction_count_block + Weekyday + Hour + avg_gas_lag1 + I(avg_gas_lag1^2) + I(attacks_GasFee_Gwei^2) +I(AttackCount^2) +I(price_USD_delta^2)
# + attacks_GasUsed or  + avg_gas_lag1 for lagged DV
# Base model without AR term
LM03_gasPriceAvg <- avg_gas ~ attacks_GasFee_Gwei + AttackCount + flashbots_Flag + flashbots_Flag:attacks_GasFee_Gwei + difficulty + price_USD_delta + transaction_count_block + Weekyday + Hour
# ADL model from base model for dynlm
# needs to be time series elemnt to work! Checked with lm() to get same result
ADL01_gasPriceAvg <- ts(avg_gas) ~ ts(attacks_GasFee_Gwei) + ts(attacks_GasFee_Gwei) + ts(attacks_GasUsed) + ts(AttackCount) + ts(flashbots_Flag) + ts(difficulty) + ts(price_USD_delta) + ts(transaction_count_block) + ts(Weekyday) + ts(Hour) + L(ts(avg_gas),1)
# Main regressions
RS_LM01_gasPriceAvg <- lm(LM01_gasPriceAvg , data = dfRegression)
RS_LM01_gasPriceMedian <- lm(LM01_gasPriceMedian , data = dfRegression)
RS_LM01_gasPriceThreshold <- lm(LM01_gasPriceThreshold , data = dfRegression)
# Without AR term
RS_LM00_gasPriceAvg <- lm(LM00_gasPriceAvg , data = dfRegression)
RS_LM00_gasPriceMedian <- lm(LM00_gasPriceMedian , data = dfRegression)
RS_LM00_gasPriceThreshold <- lm(LM00_gasPriceThreshold , data = dfRegression)
# Estimate correlation of residuals of lag = 1 https://www.youtube.com/watch?v=xtqRe8MPKoY
# we simplify rto lag 1 => use for AR(1) explanation
# need model without AR(1)
#"In other words, autocorrelation is nothing but a correlation coefficient." https://blog.quantinsti.com/autoregression/
n <- length(residuals(RS_LM00_gasPriceAvg))
cor(residuals(RS_LM00_gasPriceAvg)[-1],residuals(RS_LM00_gasPriceAvg)[-n])
# result: 0.8099724 => Extremly high correlation
stargazer(RS_LM00_gasPriceAvg, RS_LM01_gasPriceAvg,
RS_LM00_gasPriceMedian ,RS_LM01_gasPriceMedian,
RS_LM00_gasPriceThreshold, RS_LM01_gasPriceThreshold, type = , column.sep.width = "1pt", column.labels = c("No AR", "Incl. AR","No AR", "Incl. AR","No AR", "Incl. AR"), digits = 3) #, se = list(SE_NW_LM01_White)
stargazer(RS_LM00_gasPriceAvg, RS_LM01_gasPriceAvg,
RS_LM00_gasPriceMedian ,RS_LM01_gasPriceMedian,
RS_LM00_gasPriceThreshold, RS_LM01_gasPriceThreshold, type = , column.sep.width = "1pt", column.labels = c("No AR", "Incl. AR","No AR", "Incl. AR","No AR", "Incl. AR"), digits = 8) #, se = list(SE_NW_LM01_White)
# Estimate correlation of residuals of lag = 1 https://www.youtube.com/watch?v=xtqRe8MPKoY
# we simplify rto lag 1 => use for AR(1) explanation
# need model without AR(1)
#"In other words, autocorrelation is nothing but a correlation coefficient." https://blog.quantinsti.com/autoregression/
n <- length(residuals(RS_LM00_gasPriceMedian))
cor(residuals(RS_LM00_gasPriceMedian)[-1],residuals(RS_LM00_gasPriceMedian)[-n])
# result: 0.8099724 => Extremly high correlation
# Estimate correlation of residuals of lag = 1 https://www.youtube.com/watch?v=xtqRe8MPKoY
# we simplify rto lag 1 => use for AR(1) explanation
# need model without AR(1)
#"In other words, autocorrelation is nothing but a correlation coefficient." https://blog.quantinsti.com/autoregression/
n <- length(residuals(RS_LM00_gasPriceThreshold))
cor(residuals(RS_LM00_gasPriceThreshold)[-1],residuals(RS_LM00_gasPriceThreshold)[-n])
# result: 0.8099724 => Extremly high correlation
library(ggplot2)
library("dplyr")
library(stargazer)
library(tidyr)
library("readxl")
library("arrow")
library("tseries")
library(scales)
library(reshape)
library(ggbreak)
library(forcats)
library(corrplot)
library(car)
library("nlme")
library("unix")
library("dynlm")
library("sandwich")
library(lmtest)
library(MASS)
library(GGally)
library(xtable)
#rlimit_all() # reading memory limits
#rlimit_as(1e12)  #increases to ~12GB
dir <- "/Users/marcvendramet/Documents/GitHub/MV_MEV-thesis/01_R_MEV"
dirplots <- "/Users/marcvendramet/Desktop/HSG/Master/MA/99_Overleaf/02_Plots"
dirInput <- "/Volumes/Extreme SSD"
setwd(dir)
#rm(dfMaster, dfMasterAttack)
dfMasterAll <- read.csv(paste0(dirInput, "/97_FinalSet/MEV_finalDataSet_v2.csv"))
dfMasterAll$X <- NULL
dfMasterAll$ts <- as.Date(dfMasterAll$ts)
colnames(dfMasterAll)
dfMasterAll$attacks_GasFee_ETH <- dfMasterAll$attacks_GasFee_Gwei / 1000000000
dfMasterAll$attacks_GasUsedPerAttack <- dfMasterAll$attacks_GasUsed / dfMasterAll$AttackCount
dfMasterAll$attacks_GasUsedPerAttack <- dfMasterAll$attacks_GasUsedPerAttack %>% replace_na(0)
dfGasUsage <- dfMasterAll[!(dfMasterAll$AttackCount==0),]
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=attacks_GasUsedPerAttack)) +
geom_point(color="blue") +
labs(y ="Average gas usage per attack", x = "Block number")
#geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=attacks_GasUsedPerAttack)) +
geom_point(color="blue") +
labs(y ="Average gas usage per attack", x = "Block number") +
geom_smooth(method = "lm", color = "red")
#
colnames(dfGasUsage)
dfGasUsage %>%
mutate(MA_gasUsage = rollmean(block_number, k = 100, fill = NA))
dfGasUsage %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 5, fill = NA))
dfGasUsage["block_number",]
dfGasUsage$block_number
mean(232240.0+273711.0+213376.0)
232240.0+273711.0+213376.0
719327/3
719327+307606.0+375711.0
1402644/5
dfGasUsage %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 5, fill = NA, align = "right"))
dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 5, fill = NA, align = "right"))
dfGasUsage <- dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 100, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_point(color="blue") +
labs(y ="Average gas usage per attack", x = "Block number") +
geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Average gas usage per attack", x = "Block number") +
geom_smooth(method = "lm", color = "red")
#
dfGasUsage <- dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 100, fill = NA, align = "right"))
dfMasterAll$MA_gasUsage <- dfMasterAll$MA_gasUsage %>% replace_na(0)
dfGasUsage <- dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 100, fill = NA, align = "right"))
dfGasUsage <- dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 1000, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Moving avg gas usage for attacks per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
dfGasUsage <- dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 100, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Moving avg gas usage for attacks per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="MA attack gas usage per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasUsedperAttack.png", path = dirplots, width = 15, height = 8, units = "cm")
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFee_ETH / dfMasterAll$AttackCount
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFeePerAttack %>% replace_na(0)
dfMasterAll[!(dfMasterAll$AttackCount==0),]
?rollmean
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFee_ETH / dfMasterAll$AttackCount
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFeePerAttack %>% replace_na(0)
dfGasFees <- dfMasterAll[!(dfMasterAll$AttackCount==0),]
dfGasFees <- dfGasFees %>%
arrange(block_number) %>%
mutate(MA_gasFee = rollmean(attacks_GasFeePerAttack, k = 100, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasFees, aes(x=ts, y=MA_gasFee)) +
geom_line(color="blue") +
labs(y ="MA attack gas fees per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasFees, aes(x=ts, y=MA_gasFee)) +
geom_point(color="blue") +
labs(y ="MA attack gas fees per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasFees, aes(x=ts, y=MA_gasFee)) +
geom_point(color="blue", size = 0.5) +
labs(y ="MA attack gas fees per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Avg attack gas per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasUsedperAttack.png", path = dirplots, width = 15, height = 8, units = "cm")
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasFees, aes(x=ts, y=MA_gasFee)) +
geom_point(color="blue", size = 0.5) +
labs(y ="Avg attack gas fees per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
View(dfGasFees)
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFee_ETH / dfMasterAll$AttackCount
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFeePerAttack %>% replace_na(0)
dfGasFees <- dfMasterAll[!(dfMasterAll$AttackCount==0),]
library(ggplot2)
library("dplyr")
library(stargazer)
library(tidyr)
library("readxl")
library("arrow")
library("tseries")
library(scales)
library(reshape)
library(ggbreak)
library(forcats)
library(corrplot)
library(car)
library("nlme")
library("unix")
library("dynlm")
library("sandwich")
library(lmtest)
library(MASS)
library(GGally)
library(xtable)
#rlimit_all() # reading memory limits
#rlimit_as(1e12)  #increases to ~12GB
dir <- "/Users/marcvendramet/Documents/GitHub/MV_MEV-thesis/01_R_MEV"
dirplots <- "/Users/marcvendramet/Desktop/HSG/Master/MA/99_Overleaf/02_Plots"
dirInput <- "/Volumes/Extreme SSD"
setwd(dir)
#rm(dfMaster, dfMasterAttack)
dfMasterAll <- read.csv(paste0(dirInput, "/97_FinalSet/MEV_finalDataSet_v2.csv"))
dfMasterAll$X <- NULL
dfMasterAll$ts <- as.Date(dfMasterAll$ts)
dfMasterAll$attacks_GasFee_ETH <- dfMasterAll$attacks_GasFee_Gwei / 1000000000
colnames(dfMasterAll)
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFee_ETH / dfMasterAll$AttackCount
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFeePerAttack %>% replace_na(0)
View(dfMasterAll)
dfGasFees <- dfMasterAll[!(dfMasterAll$AttackCount==0),]
dfGasFees <- dfGasFees %>%
arrange(block_number) %>%
mutate(MA_gasFee = rollmean(attacks_GasFeePerAttack, k = 100, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasFees, aes(x=ts, y=MA_gasFee)) +
geom_point(color="blue", size = 0.5) +
labs(y ="Avg attack gas fees per 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasFeeperAttack.png", path = dirplots, width = 15, height = 8, units = "cm")
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasFees, aes(x=ts, y=MA_gasFee)) +
geom_point(color="blue", size = 0.5) +
labs(y ="Avg gas fee per attack over 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasFeeperAttack.png", path = dirplots, width = 15, height = 8, units = "cm")
dfMasterAll$attacks_GasUsedPerAttack <- dfMasterAll$attacks_GasUsed / dfMasterAll$AttackCount
dfMasterAll$attacks_GasUsedPerAttack <- dfMasterAll$attacks_GasUsedPerAttack %>% replace_na(0)
dfGasUsage <- dfMasterAll[!(dfMasterAll$AttackCount==0),]
dfGasUsage <- dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 100, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Avg gas used per attack over 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_point(color="blue", size = 0.5) +
labs(y ="Avg gas used per attack over 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Avg gas used per attack over 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasUsedperAttack.png", path = dirplots, width = 15, height = 8, units = "cm")
library(ggplot2)
library("dplyr")
library(stargazer)
library(tidyr)
library("readxl")
library("arrow")
library("tseries")
library(scales)
library(reshape)
library(ggbreak)
library(forcats)
library(corrplot)
library(car)
library("nlme")
library("unix")
library("dynlm")
library("sandwich")
library(lmtest)
library(MASS)
library(GGally)
library(xtable)
#rlimit_all() # reading memory limits
#rlimit_as(1e12)  #increases to ~12GB
dir <- "/Users/marcvendramet/Documents/GitHub/MV_MEV-thesis/01_R_MEV"
dirplots <- "/Users/marcvendramet/Desktop/HSG/Master/MA/99_Overleaf/02_Plots"
dirInput <- "/Volumes/Extreme SSD"
setwd(dir)
#rm(dfMaster, dfMasterAttack)
dfMasterAll <- read.csv(paste0(dirInput, "/97_FinalSet/MEV_finalDataSet_v2.csv"))
dfMasterAll$X <- NULL
dfMasterAll$ts <- as.Date(dfMasterAll$ts)
dfMasterAll$attacks_GasFee_ETH <- dfMasterAll$attacks_GasFee_Gwei / 1000000000
colnames(dfMasterAll)
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFee_ETH / dfMasterAll$AttackCount
dfMasterAll$attacks_GasFeePerAttack <- dfMasterAll$attacks_GasFeePerAttack %>% replace_na(0)
dfGasFees <- dfMasterAll[!(dfMasterAll$AttackCount==0),]
dfGasFees <- dfGasFees %>%
arrange(block_number) %>%
mutate(MA_gasFee = rollmean(attacks_GasFeePerAttack, k = 100, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasFees, aes(x=ts, y=MA_gasFee)) +
geom_point(color="blue", size = 0.5) +
labs(y ="Avg gas fee per attack over 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasFeeperAttack.png", path = dirplots, width = 15, height = 10, units = "cm")
dfMasterAll$attacks_GasUsedPerAttack <- dfMasterAll$attacks_GasUsed / dfMasterAll$AttackCount
dfMasterAll$attacks_GasUsedPerAttack <- dfMasterAll$attacks_GasUsedPerAttack %>% replace_na(0)
dfGasUsage <- dfMasterAll[!(dfMasterAll$AttackCount==0),]
dfGasUsage <- dfGasUsage %>%
arrange(block_number) %>%
mutate(MA_gasUsage = rollmean(attacks_GasUsedPerAttack, k = 100, fill = NA, align = "right"))
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Avg gas used per attack over 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasUsedperAttack.png", path = dirplots, width = 15, height = 10, units = "cm")
# adding time labels: https://stackoverflow.com/questions/30018187/changing-tick-intervals-when-x-axis-values-are-dates
ggplot(dfGasUsage, aes(x=ts, y=MA_gasUsage)) +
geom_line(color="blue") +
labs(y ="Avg gas per attack over 100 blocks with attacks", x = "Date") +
geom_smooth(method = "lm", color = "red")
#
ggsave(filename = "MA100GasUsedperAttack.png", path = dirplots, width = 15, height = 10, units = "cm")
library(ggplot2)
library("dplyr")
library(stargazer)
library(tidyr)
library("readxl")
library("arrow")
library("tseries")
library(scales)
library(reshape)
library(ggbreak)
library(forcats)
library(corrplot)
library(car)
library("nlme")
library("unix")
library("dynlm")
library("sandwich")
library(lmtest)
library(MASS)
library(GGally)
library(xtable)
#rlimit_all() # reading memory limits
#rlimit_as(1e12)  #increases to ~12GB
dir <- "/Users/marcvendramet/Documents/GitHub/MV_MEV-thesis/01_R_MEV"
dirplots <- "/Users/marcvendramet/Desktop/HSG/Master/MA/99_Overleaf/02_Plots"
dirInput <- "/Volumes/Extreme SSD"
setwd(dir)
#rm(dfMaster, dfMasterAttack)
dfMasterAll <- read.csv(paste0(dirInput, "/97_FinalSet/MEV_finalDataSet_v2.csv"))
#rm(dfMaster, dfMasterAttack)
dfMasterAll <- read.csv(paste0(dirInput, "/97_FinalSet/MEV_finalDataSet_v2.csv"))
dfMasterAll$X <- NULL
colnames(dfMasterAll)
dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackFees = sum(attacks_GasFee_Gwei))
dfMasterAll$attacks_GasFee_ETH <- dfMasterAll$attacks_GasFee_Gwei / 1000000000
dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackFees = sum(attacks_GasFee_ETH))
dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackFees = sum(attacks_GasFee_ETH)) / summarise(SumAttacksCount = sum(AttackCount))
dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackFees = sum(attacks_GasFee_ETH))
dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackCount = sum(AttackCount))
dfMasterAll %>%
group_by(flashbots_Flag)
a <- dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackFees = sum(attacks_GasFee_ETH))
b <- dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackCount = sum(AttackCount))
a$SumAttackFees / b$SumAttackCount
dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackFees = sum(attacks_GasFee_ETH))
dfMasterAll %>%
group_by(flashbots_Flag) %>%
summarise(SumAttackCount = sum(AttackCount))
24674.627/497724
2722.715/157424
C <- c(a$SumAttackFees / b$SumAttackCount)
# returns avergae gas fee per attack per flashbot dummy in ETH
ggplot(aes(x=C)) +
geom_bar(color='blue',fill='blue', alpha=0.3) +
scale_y_continuous(labels = comma) +
labs(y ="Count", x = "MEV-relay used Yes/No")
a$SumAttackFees / b$SumAttackCount
# returns avergae gas fee per attack per flashbot dummy in ETH
0.04957492-0.01729542
0.0322795/0.04957492
